#include <stdio.h>
#include <string>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

using namespace cv;
using namespace std;

const float mChannelRange[2] = {0.0, 255.0};
RNG rng(12345);

Mat BackProject(Mat image, MatND hist) {
  Mat result = image.clone();
  const float* channel_ranges[] = {mChannelRange, mChannelRange, mChannelRange};

  int* mChannelNumbers = new int[3];
  for (int count=0; count<3; count++) {
    mChannelNumbers[count] = count;
  }

  calcBackProject(&image, 1, mChannelNumbers, hist, result, channel_ranges, 255.0);
  return result;
}

int main(int argc, char** argv )
{
  string imgsDir = "Books/";
  string imgsFiles[] = {
    "BookView.jpg",
    "Glue2.jpg",
    "Glue3.jpg",
    "Glue4.jpg",
    "Glue5.jpg",
    "Glue6.jpg"
  };

  string imgFile = "BookView09.JPG"; 


  Mat sample, dst;
  sample = imread("bluesample.png");  
  if ( !sample.data) {
    cout << ("No image data for sample blue.\n");
    return -1;
  }
  Mat hls_sample;
  cvtColor(sample, hls_sample, CV_BGR2HLS);
  
  //Get the 3D histogram of the hls_sample image
  MatND sampleHist;
  int number_of_bins = 10;
  int sampleNumberChannels = hls_sample.channels();
  int* sampleChannelNumbers = new int[sampleNumberChannels];
  int* sampleNumberBins = new int[sampleNumberChannels];
  
  for (int count=0; count<sampleNumberChannels; count++) {
    sampleChannelNumbers[count] = count;
    sampleNumberBins[count] = number_of_bins;
  }
  
  const float* channel_ranges[] = {mChannelRange, mChannelRange, mChannelRange};
  calcHist(&hls_sample, 1, sampleChannelNumbers, Mat(), sampleHist, sampleNumberChannels, sampleNumberBins, channel_ranges);
  
  //Normalize the histogram of the samples and backproject the src image
  normalize(sampleHist, sampleHist, 1.0);
  
  Mat src, hls_src, backprojected_src;
  src = imread(imgsDir + imgFile,1);
  cvtColor(src, hls_src, CV_BGR2HLS);

  calcBackProject(&hls_src, 1, sampleChannelNumbers, sampleHist, backprojected_src, channel_ranges, 255.0);
  imshow("after backprojection", backprojected_src);

  Mat bin_src;
  threshold( backprojected_src, bin_src, 20, 255, THRESH_BINARY);  
  
  //Closing (dilation -> erosion) in order to get rid of small objects that may still remain in the background
  Mat closed_src;
  Mat element = getStructuringElement( MORPH_RECT, Size( 5, 5));
  morphologyEx(bin_src, closed_src, MORPH_CLOSE, element, Point(-1,-1), 1);
  imshow("after closing", closed_src);  
  
  //find contours
  /*vector<vector<Point> > contours;
  vector<Vec4i> hierarchy;
  findContours(closed_src, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
  */
  vector<Point> points;
  Mat_<uchar>::iterator it = closed_src.begin<uchar>();
  Mat_<uchar>::iterator end = closed_src.end<uchar>();
  for(; it != end; ++it){
    if(*it)
      points.push_back(it.pos());
  }

  //find rotated rectangles
  /*vector<RotatedRect> minRect(contours.size());
  for(int i = 0; i < contours.size(); i++) {
    minRect[i] = minAreaRect(Mat(contours[i]));
  }*/
  RotatedRect box = minAreaRect(Mat(points));

  //Draw rotated rects
  Mat drawing = Mat::zeros( closed_src.size(), CV_8UC3);
  Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
  Point2f rect_points[4];
  box.points(rect_points);
  for (int j = 0; j < 4; j++)
    line(drawing, rect_points[j], rect_points[(j+1)%4], color, 1, 8);

  imshow("Rects", drawing);

  waitKey(0);

  return 0;
}
